input {
	tcp {
		port => 5000
	}

	http_poller {
		urls => {
			myurl => "https://matomo.tools.factory.social.gouv.fr/index.php?module=API&method=Live.getLastVisitsDetails&idSite=4&period=day&date=today&format=JSON&token_auth=anonymous"
		}
		schedule => { cron => "5 0 * * * UTC"}
	}
}

## Add your filters / logstash plugins configuration here
filter {
	json {
		source => "message"
			target => "visit"
			remove_field => ["message"]
	}

	split {
		field => "visit"
	}

	ruby {
		code => '
			event.get("visit").each { |k, v|
				event.set(k,v)
			}
		event.remove("visit")
			'
	}


	split {
		field => "actionDetails"
	}

	ruby {
		code => '
			event.get("actionDetails").each { |k, v|
				event.set(k,v)
			}
		event.remove("actionDetails")
			'
	}


	prune {
		whitelist_names => [  "idVisit", "actionDetails", "type", "timeSpent", "url", "eventName", "eventAction", "subtitle", "eventCategory", "timestamp", "serverTimePretty" ]
	}

	ruby {
		code => '
			type = event.get("type")
# search
			if type.eql?("search") 
				event.set("query", event.get("subtitle"))
					event.remove("subtitle")

# suggestion selected
			elsif type.eql?("event") 
					if event.get("eventCategory").eql?("selectedSuggestion")
						event.set("type", "select_suggestion")
						event.set("prefix", event.get("eventAction"))
						event.set("selection", event.get("eventName"))
						event.remove("eventAction")
						event.remove("eventName")
						event.remove("eventCategory")
						event.remove("subtitle")

# feedback
					elsif event.get("eventCategory").eql?("feedback")
						event.set("type", "feedback")
						event.set("feedback_type", event.get("eventAction"))
						event.set("visited", event.get("eventName"))
						event.remove("eventName")
						event.remove("eventCategory")
						event.remove("eventAction")

# suggestion candidates
					elsif event.get("eventCategory").eql?("candidateSuggestions")
						event.set("type", "suggestion_candidates")
						event.set("suggestion_candidates", event.get("eventAction").split("###"))
						event.remove("eventCategory")
						event.remove("eventAction")
	
# search candidates
					elsif event.get("eventCategory").eql?("candidateResults")
						event.set("type", "result_candidates")
						event.set("query", event.get("eventAction"))
						# will be parsed and renamed below
						event.set("r_candidates", event.get("eventName"))
						event.remove("eventCategory")
						event.remove("eventAction")
						event.remove("eventName")

# select search result
					elsif event.get("eventCategory").eql?("selectResult")
						event.set("type", "select_result")
						event.set("selection", event.get("eventAction"))

					end


			elsif type.eql?("action") 
# home page
					if event.get("url").end_with?("gouv.fr/")
						event.set("type", "home")
# todo outlink
					elsif event.get("url").end_with?("/recherche")
						event.set("type", "external_search")
# visit page
					else
						event.set("type", "visit")
					end

			end
							'

	}

                                 
	json {
		source => "r_candidates"
		target => "result_candidates"
		remove_field => ["r_candidates"]
	}    


}

output {
	stdout {}

	elasticsearch {
		hosts => "elasticsearch:9200"
			user => "elastic"
			password => "changeme"
	}

}
